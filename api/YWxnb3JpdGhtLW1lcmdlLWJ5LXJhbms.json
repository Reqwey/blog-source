{"title":"【Algorithm Notes】并查集按秩合并","date":"2021-08-10T00:00:00.000Z","date_formatted":{"ll":"Aug 10, 2021","L":"08/10/2021","MM-DD":"08-10"},"link":"algorithm-merge-by-rank","tags":["并查集","按秩合并"],"categories":["Algorithm","OI"],"updated":"2022-10-28T09:52:02.931Z","content":"<p>我们都知道，并查集的路径压缩大大加速了操作的时间复杂度，但是如果出题人足够毒瘤，仍然可以把你卡掉。</p>\n<span id=\"more\"></span>\n<p>比如说你在<code>1</code>号点上连了<code>2</code>、<code>3</code>、<code>4</code>、<code>5</code>, 这时候进来个<code>6</code>，您觉得应该将<code>1</code>连到<code>6</code>上更优呢？还是反过来更优呢？</p>\n<p>基于减少复杂度的贪心思想，我们当然希望能够把一棵<strong>较小的</strong>并查集并入<strong>较大的</strong>一棵当中。</p>\n<p>那我们就多维护一个<code>siz[root]</code>，表示当前这棵以<code>root</code>为根的并查集的<strong>大小</strong>或<strong>深度</strong>。</p>\n<p>这样，我们以<code>siz</code>作为关键字进行判断谁应该合并到谁的父亲上。</p>\n<h2 id=\"更进一步\">更进一步<a title=\"#更进一步\" href=\"#更进一步\"></a></h2>\n<blockquote>\n<p>开两个数组好累啊 QwQ</p>\n<p>那好，我们可以只开一个！</p>\n</blockquote>\n<p>通过观察，我们发现这棵并查集，它的根节点的父亲<code>fa[root]</code>是没有用的，他唯一的功能是判断<strong>到头了没有</strong>。</p>\n<p>那我们可以令<code>fa[root] = siz[root]</code>。</p>\n<p>当然，也许会问，如果是这样会不会造成无法判断根，数组越界？</p>\n<p>说的好！</p>\n<p>那我们可以把他改成这样：<code>fa[root] = -siz[root]</code>。</p>\n<p>一旦发现<code>fa[x] &lt; 0</code>，就立刻发现不对劲！节点编号不可能是负数！那一定是到头啦，于是我们愉快的把<code>x</code>揪了出来，他就是根节点！</p>\n<p>看起来细节还蛮多的嘛！</p>\n<p>可不是嘛！代码写起来细节更多！尤其是如果写成非递归的形式，那么你可能要提前判一下<code>fa[fa[x]]</code>是否是负数！小心跳过头了哦！</p>\n<h2 id=\"实战！\">实战！<a title=\"#实战！\" href=\"#实战！\"></a></h2>\n<p><img src=\"https://i.loli.net/2021/08/10/WBVSfQIZTMj1AHK.png\" alt=\"题目\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"以子树大小为关键字\">以子树大小为关键字<a title=\"#以子树大小为关键字\" href=\"#以子树大小为关键字\"></a></h3>\n<h4 id=\"在-main()-中\">在 <code>main()</code> 中<a title=\"#在-main()-中\" href=\"#在-main()-中\"></a></h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) fa[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> z, x, y;</span><br><span class=\"line\">\t<span class=\"built_in\">read</span>(z), <span class=\"built_in\">read</span>(x), <span class=\"built_in\">read</span>(y);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (z == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fx = <span class=\"built_in\">f</span>(x), fy = <span class=\"built_in\">f</span>(y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (fx != fy) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (fa[fx] &lt; fa[fy])</span><br><span class=\"line\">\t\t\t\tfa[fx] += fa[fy], fa[fy] = fx;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tfa[fy] += fa[fx], fa[fx] = fy;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fx = <span class=\"built_in\">f</span>(x), fy = <span class=\"built_in\">f</span>(y);</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(fx == fy ? <span class=\"string\">&quot;Y&quot;</span> : <span class=\"string\">&quot;N&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"f()-函数\"><code>f()</code> 函数<a title=\"#f()-函数\" href=\"#f()-函数\"></a></h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e4</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">IL <span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fa[x] &gt; <span class=\"number\">0</span> &amp;&amp; fa[fa[x]] &gt; <span class=\"number\">0</span>) x = fa[x] = fa[fa[x]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[x] &lt; <span class=\"number\">0</span> ? x : fa[x];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"以深度为关键字\">以深度为关键字<a title=\"#以深度为关键字\" href=\"#以深度为关键字\"></a></h3>\n<h4 id=\"在-main()-中-1\">在 <code>main()</code> 中<a title=\"#在-main()-中-1\" href=\"#在-main()-中-1\"></a></h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) fa[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> z, x, y;</span><br><span class=\"line\">\t<span class=\"built_in\">read</span>(z), <span class=\"built_in\">read</span>(x), <span class=\"built_in\">read</span>(y);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (z == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fx = <span class=\"built_in\">f</span>(x), fy = <span class=\"built_in\">f</span>(y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (fx != fy) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (fa[fx] &lt; fa[fy])</span><br><span class=\"line\">\t\t\t\tfa[fy] = fx;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (fa[fx] == fa[fy])</span><br><span class=\"line\">\t\t\t\t\tfa[fy]--;</span><br><span class=\"line\">\t\t\t\tfa[fx] = fy;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fx = <span class=\"built_in\">f</span>(x), fy = <span class=\"built_in\">f</span>(y);</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(fx == fy ? <span class=\"string\">&quot;Y&quot;</span> : <span class=\"string\">&quot;N&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"f()函数\"><code>f()</code>函数<a title=\"#f()函数\" href=\"#f()函数\"></a></h4>\n<blockquote>\n<p>与第一种情况的相同</p>\n</blockquote>\n","prev":{"title":"【Solution】Muddy Fields G-二分图匹配","link":"solution-luogu-6062"},"next":{"title":"【Solution】砝码称重-DP+bitset","link":"solution-luogu-1441"},"plink":"https://oi.reqwey.com/algorithm-merge-by-rank/","toc":[{"id":"更进一步","title":"更进一步","index":"1"},{"id":"实战！","title":"实战！","index":"2","children":[{"id":"以子树大小为关键字","title":"以子树大小为关键字","index":"2.1"},{"id":"以深度为关键字","title":"以深度为关键字","index":"2.2"}]}],"copyright":{"link":"<a href=\"https://oi.reqwey.com/algorithm-merge-by-rank/\" title=\"【Algorithm Notes】并查集按秩合并\">https://oi.reqwey.com/algorithm-merge-by-rank/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International<br>(<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"699 words in 5 min"}